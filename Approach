To solve this task, I employed a modular and scalable approach by structuring the React Native Expo project with clear component separation and efficient state management. I used the useState and useEffect hooks to manage dynamic data, ensuring that API requests were handled asynchronously with proper loading and error states. Axios was integrated for fetching news data from an external API, and I utilized FlatList for rendering articles in a performant manner, ensuring smooth scrolling even with large datasets. By using React Navigation's Bottom Tab Navigator, I structured the app's navigation to provide easy transitions between key screens (Home, Favs, and Profile), making the user experience intuitive and consistent across the app.

For UI design, I focused on building responsive components that would work well on both iOS and Android devices. I used StyleSheet.create() to define reusable styles for the components, ensuring that the UI components maintained a consistent layout. Additionally, I leveraged custom fonts loaded through Expoâ€™s useFonts hook to improve the visual design. I handled category filtering by creating a reusable Category component that dynamically maps categories to clickable buttons, and incorporated a feature for displaying a "featured article" on the Home screen. This modular approach made the app easy to maintain and extend, while ensuring high performance through techniques like windowing and conditional rendering to handle dynamic data efficiently.
